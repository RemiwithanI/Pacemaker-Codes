#Citation: Raza Kazmi, S. A., Abubakkar, S., Qasim, A., Abbas Kazmi, S. H., … Qureshi, U. Q. (2017). Formal Modelling and Verification of the Operational Modes of Pacemaker. Indian Journal of Science and Technology, 10(20), 1–12. doi:10.17485/ijst/2017/v10i20/104028 

#This is written with formal methods, involving tools from Process Algebra like algebriac languages: Calculus of Communicating Systems (CCS), Commmunicating Sequential Processes (CSP) and LOTOS. 
#This seeks to model the heart and model a pacemaker, more than it really codes one
#The basic modes for any pacemaker involves: No response to Sensing(O) means pacing without sensing; triggered response to sensing(T) means triggered pacing; Inhibited response to sensing (I) means during inhibited pacing; tracked response to sensing (D) means during tracked pacing.
#These modes apply onto the atria (A), ventricles (V), both atria and ventricles (D) and create 18 total mores: AAT, VVT, AOO, AAI, VOO, VVI, VDD, DOO, DDI, DDD, AOOR, AAIR, VOOR, VVIR, VDDR, DOOR, DDIR, DDDR


#Six possible behaviours of the heart is as follows. AVD represents atrial ventricular delay, AI refers to interval between two consecutive atrial/ventricular events, L represents the random length of time which delays a pulsing event.
  Heart() =
  /* normal case */
  (paceA®Wait[AVD]); (paceV®Wait[AI - AVD]);
Repeat Heart() 

  /* Ventricle Pace missing */
  (paceA® Wait[AVD]) ; (nopace®Wait[AI - AVD]);
Repeat Heart()

  /* Atrial Pace missing */
  (nopaceA®Wait[AVD]); (paceV®Wait[AI - AVD]);
Repeat Heart() 

  /* Dead Heart */
  (nopaceA®Wait[AVD]); (nopaceV®Wait[AI -
AVD]); Repeat Heart() 

  /* Non-deterministic (delayed A or V)*/
  (paceA®Wait[AVD+L]); (paceV®Wait[AI - AVD]);
Repeat Heart() 
  (paceA®Wait[AVD]); (paceV®Wait[HI - AVD+L]);
Repeat Heart() 

#Model to capture heart pulse and contraction event of the atria and ventricles. Records the pcaes of the heart and pace generator during non-rate-modulation modes: AAT, VVT, AOO, AAI, VOO, VVI, VDD, DOO, and DDI
#Also captures time properties of contraction event e.g.: atrial refractory period, ventricle refractory period
#AS denotes if atrial pulse is accepted by the pacemaker; VS deotes if ventricle pulse is accepted by the pacemaker

  /* Atria Sensor */
  ASensor() = [AS==1] paceA®senseA®Repeat
ASensor()
  □ [AS==0] paceA®Repeat ASensor()

  /* Ventricle Sensor */
  VSensor() = [VS==1] paceV®senseV®Repeat
VSensor()
  □ [VS==0] paceV®Repeat VSensor()

#Model to record rate-modulation modes: AOOR, AAIR, VOOR, VVIR, VDDR, DOOR, DDIR, and DDDR
#Captures activity information from the human body 
#SAct is the value of the body activity to adjust the new rate of the pulse. Rate controller adjusts heart pulse according to the value of sensed activity level by accelerator. actInfo denotes current activity level; NewInterval is target pulse interval

  /* Accelerometer activity sensor */
  AccM() = (ActNone{SAct=ActInfo}
®RateController()
  ⊓ActNone{SAct=0} ®RateController()
  ⊓ActVLow{SAct=1} ®RateController()
  ⊓ActLow{SAct=2} ®RateController()
  ⊓ActMLow{SAct=3} ®RateController()
  ⊓ActMedm{SAct=4} ®RateController()
  ⊓ActMHigh{SAct=5} ®RateController()
  ⊓ActHigh{SAct=6} ®RateController()
  ⊓ActVHigh{SAct=7} ®RateController()) within[0];

  RateController () = (RateAdjusting {(SAct! = ActInfo)
{ActInfo = SAct; NewInterval= URI+(LRI-URI)*(VHigh-
SAct)/VHigh;} 

  /* increaseinterval */
  if(Interval <NewInterval) ®(interval=interval+interv
al*(LRI-MSI)/Recovery Time);

  /* decrease interval */
  if(Interval >NewInterval) ®(interval=interval-interval*(
LRI-MSI)/Reaction Time);
} ®Skip) within[0]; 

#VVIR mode to pace and sense ventricle chamber of the heart.
#Pace generated if no ventricular electrical activity is sensed within specified interval; pace generator inhibits pace is ventricular activity performed normally

  PGVVIR= (Heart || VSensor || paceVVIR) ∖ {senseV,
paceA, paceV, paceAmissing,
  paceVmissing, VS=1, ActNone, ActVLow, ActLow,
ActMLow, ActMedm,ActMHigh, ActHigh, ActVHigh,
RateAdjusting}; 

  PaceVVIR() = AccM(); RateController();PaceVVIR2();Pac
eVVIR1(); 

  PaceVVIR1()= AccM(); RateController();PaceVVIR3();
PaceVVIR1(); 

  PaceVVIR2()= ((atomic{senseV®paceV{VS=0} ®Skip})
timeout[interval]
  ((paceV{VS=0} ®Skip) within[0]); wait[VRP];
(enableVS{VS=1} ®Skip) within[0]); 

  PaceVVIR3()= ((atomic{senseV®paceV{VS=0}
®Skip}) timeout[interval - VRP] ((paceV{VS=0} ®Skip)
within[0]); wait[VRP] ; (enableVS{VS=1} ®Skip)
within[0]); 

#DDDR mode 
#Pace produced if no organic atrial activity happens for set interval; alt ventricular pacing produced if no native ventricle activity occurs for set interval following atrial activity

  PGDDDR = (setASVS{AS=0; VS=1;} ®Skip) within[0];
(Heart || VSensor || ASensor
  || PaceDDDR) ∖ {senseA, senseV, paceA, paceV,
paceAmissing, paceVmissing, AS=1,
    VS=1, setASVS, ActNone, ActVLow, ActLow,
ActMLow, ActMedm,
  ActMHigh, ActHigh, ActVHigh, RateAdjusting};
  
  PGDDDR()= AccM(); RateController();PaceDDDR2();
PaceDDDR1(); 

  PGDDDR1()= AccM(); RateController();PaceDDDR3();
PaceDDDR1(); 

  PGVVIR2()= (atomic{senseV®paceV{AS=0; VS=0;}
®Skip} timeout[interval]
  (paceV{AS=0; VS=0} ®Skip) within[0]);
wait[PVARP]; (enableAS{AS=1} ®Skip)
  within[0]); (atomic{senseA®paceA{AS=0; VS=1;}
®Skip}
  timeout[interval-AVD-PVARP](paceA{AS=0; VS=1}
®Skip) within[0]); 

  PGVVIR3()= (atomic{senseV®paceV{AS=0; VS=0;}
®Skip} timeout[AVD]
  (paceV{AS=0; VS=0} ®Skip) within[0]);
wait[PVARP]; (enableAS{AS=1} ®Skip)
  within[0]);(atomic{senseApaceA{AS=0; VS=1;}
®Skip}
  timeout[interval-AVD-PVARP](paceA{AS=0; VS=1}
®Skip) within[0]); 

#Model verification using SPIN model checker with LTL properties

  AVDelay = G (Sensed AV Delay < Fixed AV Delay)      #delay between atrial and ventricular paces

#Verification of refractory period of which cardiac cell cannot start action potential for a period of time following paced event in a chamber

  ARP = G ((Last Paced Pulse Atria - Last Sensed Atria) #atrial refractory period
> Atria RP) 

  VRP = G ((Last Paced Pulse Ventricle - Last Sensed    #ventricle refractory period
Ventricle) > Ventricle RP) 

  PVARP = G (((Last Paced Pulse Atria - Last Sensed     #post ventricle atrial refractory period
Atria) > PVARP) &&  
  ((Last Paced Pulse Ventricle - Last Sensed Ventricle) >
PVARP)) 

#Verification of pace limit dekuvered in one minute. LRL: lower rate limit; URL: upper rate limit

  RateLimitA = G(pacing rate of atria < URL && pacing
rate of atria > LRL)

  RateLimitV = G(pacing rate of ventricle < URL &&
pacing rate of ventricle > LRL)

#Verification if paces are triggering whenever a sense is detected in a chamber

  AAT = G (sense Atrial®pace Atria)
  
  VVT = G (sense Ventricle ®pace Ventricle)
  
#Verification if ventricle pace is supplied after sense in atria/inhibited if sense in ventricle
  
  VDD = G (Sense Atria ®F (Pace Ventricle && Sensed
AVD < Fixed AVD)) 

#Verification if pending pace is inhibited after sense in that chamber

  AAI = G (sense Atrial®not pace Atria)

  VVI = G (sense Ventricle ®not pace Ventricle)
  
#Verification that pacing rate less than the maximum sensor rate in rate controlled pacing modes

  RateLimitA_R = G (Rate of pacing Atrial< Max Sensor
Rate) 

  RateLimitV_R = G (Rate of pacing Ventricle < Max
Sensor Rate)

#Verification that pacing rate is changed according to metabolic activity detected by accelerometer

  RateControlLimit_A = GF (Rate of pacing A == RF *
Activity Threshold) 

  RateControlLimit_V = GF (Rate of pacing V == RF *
Activity Threshold)

